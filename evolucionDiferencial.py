# -*- coding: utf-8 -*-
"""Untitled16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/102wZjG1XNLE1Mx7Vm5cZMA3eCCL6GMiq
"""

import numpy as np
def fitness(pop):
  fitness=[]
  for c in pop:
    clashes = 0;
    row_col_clashes = abs(len(c) - len(np.unique(c)))
    clashes += row_col_clashes
    for i in range(len(c)):
      for j in range(len(c)):
        if ( i != j):
          dx = abs(i-j) 
          dy = abs(c[i] - c[j])
          if(dx == dy):
            clashes += 1
    fitness.append(28-clashes)
  return fitness
 
def fitness_ind(p):
  clashes = 0;
  row_col_clashes = abs(len(p) - len(np.unique(p)))
  clashes += row_col_clashes
  for i in range(len(p)):
    for j in range(len(p)):
      if ( i != j):
        dx = abs(i-j) 
        dy = abs(p[i] - p[j])
        if(dx == dy):
          clashes += 1
  return 28 - clashes
 
def select_best(fit):
  val = max(fit)
  pos=0
  for i in range(0,len(fit)):
    if(fit[i] == val):
      pos=i
      break
  return pos
 
def recombinacion(target,mutant,pop,j):
  cross_points = np.random.rand(8) < 0.6
  trial = np.where(cross_points, mutant, target)
  print("trial:",trial)
  fit_target=fitness_ind(target)
  fit_trial=fitness_ind(trial)
  #print(fit_target," vs ",fit_trial)
  if(fit_trial>fit_target):
    pop[j]=trial
  print("poblacion actual",pop)
  return(pop)
 
def mutacion(pop):
  mut = 0.8
  i=0
  for j in pop:
    target = j
    print("target: ", target)
    idxs = [idx for idx in range(9) if idx != i]
    selected = np.random.choice(idxs, 3, replace=False)
    a, b, c = pop[selected]
    mutant=np.round(a + mut * (b - c))
    #print(mutant)
    mutant =np.clip(mutant,1,8)
    print("Mutant:",mutant)
    pop=recombinacion(target,mutant,pop,i)
    i=i+1
  return pop
 
tam_pob=0
mejores_salidas=[]
poblacion =np.array([np.random.randint(1,8,8)])
while(tam_pob<9):
  pop=np.random.randint(1,8,8)
  poblacion = np.concatenate((poblacion,[pop]),axis=0)
  tam_pob=tam_pob+1
print("Poblacion inicial: ",poblacion)
best_fit=0
it=0
#while(it<5000):
while(best_fit!=28):
  poblacion=mutacion(poblacion)
  fit=fitness(poblacion)
  best_fit=max(fit)
  mejores_salidas.append(best_fit)
  #print("max fitness",best_fit)
  it=it+1
print("El resultado es ",poblacion[select_best(fit)])
import matplotlib.pyplot
matplotlib.pyplot.plot(mejores_salidas)
matplotlib.pyplot.xlabel("Iteracion")
matplotlib.pyplot.ylabel("Fitness")
matplotlib.pyplot.show()