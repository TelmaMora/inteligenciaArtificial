# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q6i5vtzJhSmJzUm9CJQMTPM3Llxc_fyp
"""

import numpy as np
def f(p):
  return (-50*(p**2))+(500*p)
def fitness(poblacion): 
    fitness = np.sum(f(poblacion), axis=1)
    return fitness

def selecccion(poblacion, fitness, num_padres):
    padres = np.empty((num_padres, poblacion.shape[1]))
    for j in range(num_padres):
        max = np.where(fitness == np.max(fitness))
        max = max[0][0]
        padres[j, :] = poblacion[max, :]
        fitness[max] = -99999999999
    return padres

def cruza(padres, tam_descendencia):
    descendencia = np.empty(tam_descendencia)
    punto_cruza = np.uint8(tam_descendencia[1]/2)
  
    for k in range(tam_descendencia[0]):
        padre1 = k%padres.shape[0]
        padre2 = (k+1)%padres.shape[0]
        descendencia[k, 0:punto_cruza] = padres[padre1, 0:punto_cruza]
        descendencia[k, punto_cruza:] = padres[padre2, punto_cruza:]
    return descendencia

def mutacion(opc_cruza, mutaciones=1):
    c = np.uint8(opc_cruza.shape[1] / mutaciones)
    for i in range(opc_cruza.shape[0]):
        gen = c - 1
        for m in range(mutaciones):
            val_r = np.random.uniform(-1.0, 1.0, 1)
            opc_cruza[i, gen] = opc_cruza[i, gen] + val_r
            gen = gen + c
    return opc_cruza
dimens = 1 
num_sol = 8
num_padres = 2
tam_pob = (num_sol,dimens)
nueva_poblacion = np.random.uniform(low=-4.0, high=4.0, size=tam_pob)
print(nueva_poblacion)

mejores_salidas = []
num_iteraciones = 100
for generacion in range(num_iteraciones):
    print("Generacion : ", generacion)
    cfitness = fitness(nueva_poblacion)
    print("Fitness")
    print(cfitness)

    mejores_salidas.append(np.max(np.sum(f(nueva_poblacion), axis=1)))
    print("Mejor resultado : ", np.max(np.sum(f(nueva_poblacion))))
    
    padres = selecccion(nueva_poblacion, cfitness, num_padres)
    print("Padres")
    print(padres)

    opc_cruza = cruza(padres, tam_descendencia=(tam_pob[0]-padres.shape[0], dimens))
    print("Cruza")
    print(opc_cruza)

    opc_mutacion = mutacion(opc_cruza, mutaciones=2)
    print("Mutacion")
    print(opc_mutacion)

    nueva_poblacion[0:padres.shape[0], :] = padres
    nueva_poblacion[padres.shape[0]:, :] = opc_mutacion

fitnessc = fitness(nueva_poblacion)
m = np.where(fitnessc == np.max(fitnessc))

print("Mejor solucion : ", nueva_poblacion[m, :])
print("Fitness de la mejor solucion  : ", fitnessc[m])

import matplotlib.pyplot
matplotlib.pyplot.plot(mejores_salidas)
matplotlib.pyplot.xlabel("Iteracion")
matplotlib.pyplot.ylabel("Fitness")
matplotlib.pyplot.show()